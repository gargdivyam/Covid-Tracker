{"version":3,"sources":["Summary.js","Countries.js","App.js","serviceWorker.js","index.js"],"names":["Summary","summary","Currentdate","className","NewConfirmed","Date","toDateString","TotalConfirmed","NewDeaths","TotalDeaths","TotalRecovered","Countries","countries","Country","NewRecovered","App","useState","global","setGlobal","setCountries","currentdate","setCurrentdate","useEffect","getData","a","async","fetch","response","json","data","Global","console","log","map","country","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAoCeA,G,MAjCC,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QAAQC,EAAgB,EAAhBA,YACtB,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,gBACX,6CACA,4BAAKF,EAAQG,cACb,4BAAK,IAAIC,KAAKH,GAAaI,iBAE/B,yBAAKH,UAAU,kBACX,+CACA,4BAAKF,EAAQM,gBACd,4BAAK,IAAIF,KAAKH,GAAaI,iBAE9B,yBAAKH,UAAU,aACX,0CACA,4BAAKF,EAAQO,WACd,4BAAK,IAAIH,KAAKH,GAAaI,iBAE9B,yBAAKH,UAAU,eACX,4CACA,4BAAKF,EAAQQ,aACb,4BAAK,IAAIJ,KAAKH,GAAaI,iBAE/B,yBAAKH,UAAU,kBACX,+CACA,4BAAKF,EAAQS,gBAChB,4BAAK,IAAIL,KAAKH,GAAaI,oBCZzBK,EAfG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,UAChB,OAEQ,wBAAIT,UAAU,YACX,4BAAKS,EAAUC,SACf,4BAAKD,EAAUR,cACf,4BAAKQ,EAAUL,gBACf,4BAAKK,EAAUJ,WACf,4BAAKI,EAAUH,aACf,4BAAKG,EAAUE,cACf,4BAAKF,EAAUF,kBCiDfK,G,MAxDH,WAAO,IAAD,EAEYC,mBAAS,IAFrB,mBAETC,EAFS,KAEDC,EAFC,OAGkBF,mBAAS,IAH3B,mBAGTJ,EAHS,KAGEO,EAHF,OAIsBH,mBAAS,MAJ/B,mBAITI,EAJS,KAIIC,EAJJ,KAOhBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAU,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACSE,MAAM,uCADf,cACRC,EADQ,kBAAAH,EAAA,MAEKG,EAASC,QAFd,OAERC,EAFQ,OAGdX,EAAUW,EAAKC,QACfX,EAAaU,EAAKlB,WAClBU,EAAeQ,EAAKxB,MACpB0B,QAAQC,IAAIH,GANE,uCAWhB,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CACAF,QAAWgB,EACXf,YAAekB,EACfT,UAAaC,IAEb,+BACI,+BACE,4BACE,uCACA,6CACA,+CACA,0CACA,4CACA,6CACA,iDAGJ,+BACGA,EAAUqB,KAAI,SAAAC,GAAO,OACpB,kBAAC,EAAD,CACAtB,UAAasB,EACbC,IAAOD,EAAQrB,kBCtCTuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.13a65253.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Summary.css\";\r\n\r\nconst Summary = ({summary,Currentdate}) =>{\r\n    return(\r\n        <div className=\"row\">\r\n            <div className=\"NewConfirmed\">\r\n                <h3>New Confirmed</h3>\r\n                <h1>{summary.NewConfirmed}</h1>\r\n                <h4>{new Date(Currentdate).toDateString()}</h4>\r\n            </div>\r\n            <div className=\"TotalConfirmed\">\r\n                <h3>Total Confirmed</h3>\r\n                <h1>{summary.TotalConfirmed}</h1>\r\n               <h4>{new Date(Currentdate).toDateString()}</h4>\r\n            </div>\r\n            <div className=\"NewDeaths\">\r\n                <h3>New Deaths</h3>\r\n                <h1>{summary.NewDeaths}</h1>\r\n               <h4>{new Date(Currentdate).toDateString()}</h4>\r\n            </div>\r\n            <div className=\"TotalDeaths\">\r\n                <h3>Total Deaths</h3>\r\n                <h1>{summary.TotalDeaths}</h1>\r\n                <h4>{new Date(Currentdate).toDateString()}</h4>\r\n            </div>\r\n            <div className=\"TotalRecovered\">\r\n                <h3>Total Recovered</h3>\r\n                <h1>{summary.TotalRecovered}</h1>\r\n             <h4>{new Date(Currentdate).toDateString()}</h4>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n};\r\nexport default Summary;","import React from \"react\";\r\n\r\nconst Countries = ({countries}) =>{\r\n    return (\r\n        \r\n            <tr className=\"tablerow\">\r\n               <td>{countries.Country}</td>\r\n               <td>{countries.NewConfirmed}</td>\r\n               <td>{countries.TotalConfirmed}</td>\r\n               <td>{countries.NewDeaths}</td>\r\n               <td>{countries.TotalDeaths}</td>\r\n               <td>{countries.NewRecovered}</td>\r\n               <td>{countries.TotalRecovered}</td>\r\n            </tr>\r\n    )\r\n};\r\n\r\nexport default Countries;","import React, { useState, useEffect } from 'react';\nimport Summary from \"./Summary\";\nimport Countries from \"./Countries\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  const [global, setGlobal] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [currentdate, setCurrentdate] = useState(null);\n  \n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = async () => {\n    const response = await fetch(`https://api.covid19api.com/summary`);\n    const data = await response.json();\n    setGlobal(data.Global);\n    setCountries(data.Countries);\n    setCurrentdate(data.Date);\n    console.log(data);\n  }\n  \n\n\n  return (\n    <div className=\"App\">\n      <Summary \n      summary = {global}\n      Currentdate = {currentdate}\n      Countries = {countries}\n       />\n      <table>\n          <thead>\n            <tr>\n              <th>Country</th>\n              <th>New Confirmed</th>\n              <th>Total Confirmed</th>\n              <th>New Deaths</th>\n              <th>Total Deaths</th>\n              <th>New Recovered</th>\n              <th>Total Recovered</th>\n            </tr>\n          </thead>\n          <tbody>\n            {countries.map(country =>(\n              <Countries \n              countries = {country}\n              key = {country.Country}\n              />\n            ))}\n          </tbody>\n      </table>\n    \n    </div>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}